"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""


import os
from os.path import abspath, dirname, join
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = dirname(dirname(dirname(abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tjukl@v$wc(eb5#eei@me-i%=*fi8k61#s78hdfaf35o=q+y*j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third apps
    "corsheaders",
    # "django_pydenticon",
    "rest_framework",
    "django_extensions",
    # local apps    
    'challenges',
    'leaderboard',
    "account",
]

MIDDLEWARE = [    
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "account.User"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# 각 static 파일에 대한 URL Prefix
    # 템플릿 태그 {%static "경로" %} 에 의해서 참조되는 설정

# 나중에 아마존이나 다른곳에 올릴때 STATIC_URL = 'http://sw.dfhjkadg/static/' 이런식으로 처리
# 항상 / 로 끝나도록 설정
STATIC_URL = '/static/'
# python manage.py collectstatic 명령이 참조되는 설정
# 여러 디렉토리로 나눠진 static파일들을 이 경로의 디렉토리로 복사하여, 서빙 배포에서만 의미가 있는 설정
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'backend', 'static')
# ]

# 원래 프로젝트를 시작하면 바로 설정해야하는 부분

# 각 media 파일에 대한 URL Prefix
# 필드명.url 속성에 의해서 참조되는 설정
# 즉 파일에 직접 접근할때 사용됨

MEDIA_URL = '/media/'
# MEDIA_URL = '/mymedia/' <- 이런식으로 이름 바꿀수도 있음

# MEDIA 파일이 저장되는경로를 지정
# BASE_DIR은 위쪽에 있음
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# 소스 코드 밖에 둘것이다.          위쪽의 퍼블릭의 미디아 폴더에 넣을것이다.
# MEDIA_ROOT =os.path.join(BASE_DIR,   '..','public','media')

# FILE_UPLOAD_MAX_MEMORY_SIZE = '2621440'

# # Email with Send Grid (메일 보내기)
# SENDGRID_API_KEY = os.environ.get("SENDGRID_API_KEY")
# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_HOST_USER = 'apikey'
# EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [ 'rest_framework.permissions.AllowAny'],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

JWT_AUTH = {
    "JWT_SECRET_KEY": SECRET_KEY,  # FIXME: JWT_SECRET_KEY
    "JWT_ALGORITHM": "HS256",
    "JWT_ALLOW_REFRESH": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=7),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=28),
}